#
# Mailman 3 integration for mailserver.
# From https://github.com/maxking/docker-mailman/blob/main/docker-compose.yaml
#
# Usage: Copy this file into the repository root, and fill in the TODOs
#
# - You will need to generate 2 random strings:
#   - one for the (internal) HYPERKITTY_API_KEY used by mailman-core and mailman-web
#   - one for the SECRET_KEY used for Django
#
# - Add a "mailman@[DOMAIN]" user to the mailserver via './user.sh add mailman@[DOMAIN]' and fill in 
#    SMTP_HOST_USER and SMTP_HOST_PASSWORD below accordingly.
#
# - Fill in admin account information (username, email) for mailman's web interface.
#   This is how you'll log in to the admin interface.
#   Make sure the email address is valid - your first login will require you to go through the
#   "forgot password" routine to set your initial password.
#
# After finishing the set-up (see README.md)
# - To test settings, run
#     docker-compose -f mailman.yaml up
# - To stop, press CTRL+C and run
#     docker-compose -f mailman.yaml down
#   to clean up docker resources.
#
# Install the mailserver-mailman.service file with the host's systemd to start mailman at boot time.
#
version: '2'

services:
  mailman-core:
    image: maxking/mailman-core:0.4
    container_name: mailman-core
    hostname: mailman-core
    volumes:
    - ./_server_workspace_/mailman/core:/opt/mailman/
    stop_grace_period: 30s
    depends_on:
    - database
    environment:
    - MM_HOSTNAME=mailman-core
    - DATABASE_URL=postgresql://mailman:mailmanpass@mailman-db/mailmandb
    - DATABASE_TYPE=postgres
    - DATABASE_CLASS=mailman.database.postgresql.PostgreSQLDatabase
    - HYPERKITTY_API_KEY=  # TODO: Generate API key (random string) and add here and to mailman-web below
    - SMTP_HOST=mailserver
    - SMTP_PORT=25
    - SMTP_HOST_USER=      # TODO: Add a mailman user (e.g. "mailman@DOMAIN") to the mailserver using "user add ..." and paste the username here
    - SMTP_HOST_PASSWORD=  # TODO: mailman user's password goes here.
    - MTA=postfix
    # No exports needed as we're using the mailserver docker network
    # ports:
    # - "127.0.0.1:20001:8001" # API
    # - "127.0.0.1:8024:8024" # LMTP - incoming emails
    networks:
      mailserver-network:

  mailman-web:
    image: maxking/mailman-web:0.4
    container_name: mailman-web
    hostname: mailman-web
    depends_on:
    - database
    links:
    - mailman-core:mailman-core
    - database:database
    volumes:
    - ./_server_workspace_/mailman/web:/opt/mailman-web-data
    environment:
    - SERVE_FROM_DOMAIN=    # TODO: set this to HOSTNAME from settings.env
    - MAILMAN_ADMIN_USER=   # TODO: custom admin login
    - MAILMAN_ADMIN_EMAIL=  # TODO: admin email addres. Use this and the web interface's "forgot password" feature to set your initial password.
    - SECRET_KEY=           # TODO: Generate Django secret key (random string) and add here
    - DATABASE_TYPE=postgres
    - DATABASE_URL=postgresql://mailman:mailmanpass@mailman-db/mailmandb
    - HYPERKITTY_API_KEY=   # TODO: API key from above
    - SMTP_HOST=mailserver
    - SMTP_PORT=25
    - SMTP_HOST_USER=       # TODO: Mailman user from above
    - SMTP_HOST_PASSWORD=   # TODO: mailman user's password from above
    # No exports needed as we're using the mailserver docker network
    # ports:
    # - "127.0.0.1:20001:8001" # API
    # - "127.0.0.1:8024:8024" # LMTP - incoming emails
    networks:
      mailserver-network:

  database:
    container_name: mailman-db
    hostname: mailman-db
    environment:
    - POSTGRES_DB=mailmandb
    - POSTGRES_USER=mailman
    - POSTGRES_PASSWORD=mailmanpass
    image: postgres:11-alpine
    volumes:
    - ./_server_workspace_/mailman/database:/var/lib/postgresql/data
    networks:
      mailserver-network:

  # A simple alpine-based log watcher for the various logfiles core and web are producing
  logwatcher:
    container_name: mailman-logwatcher
    hostname: mailman-logwatcher
    image: alpine
    restart: always
    volumes:
    - ./_server_workspace_/mailman:/logs
    command: /bin/ash -c "
      apk add inotify-tools;
      while true; do
          tail -f /logs/core/var/logs/* /logs/web/logs/* &
          inotifywait -e delete -e create -e move /logs/core/var/logs/ /logs/web/logs/;
          echo ================ LOG FILES CHANGE DETECTED, RESTARTING TAIL ===============;
          kill %1;
          wait;
      done"
    networks:
      mailserver-network:

networks:
  mailserver-network:
    external: true
